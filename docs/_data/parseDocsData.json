[
  {
    "parent": "DocumentModality",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "DocumentModality",
    "name": "_database",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "DocumentModality",
    "name": "_sql",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "DocumentModality",
    "name": "createType",
    "desc": "Create a new document type in the schema.",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "deleteFrom",
    "desc": "Delete records of a certain type, target specific records\nusing the  `where`  property of the options argument.",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "deleteOne",
    "desc": "Delete a specific record by providing the  `rid`",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "dropType",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "newDocument",
    "desc": "Insert a new document into the database.",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "newTransaction",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "selectFrom",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "selectOne",
    "desc": "Select a specific record by providing the  `rid`",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "transaction",
    "desc": "Helps to manage a transaction, by automatically invoking  `newTransation` ,\nand passing the returned  `SpriteTransaction`  to a callback as an argument,\nto be passed to non-idempotent databases operations.",
    "type": "method"
  },
  {
    "parent": "DocumentModality",
    "name": "updateOne",
    "desc": "Update one record in the database, by providing an RID.",
    "type": "method"
  },
  {
    "name": "DocumentModality",
    "desc": "Handles the operations related to document records in the database.\nIt wraps the methods of the SpriteOperations class with types.",
    "type": "class"
  },
  {
    "parent": "GraphModality",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "GraphModality",
    "name": "_database",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "GraphModality",
    "name": "_sql",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "GraphModality",
    "name": "createEdgeType",
    "desc": "Create a new edge type.",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "createVertexType",
    "desc": "Create a new vertex type.",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "deleteFrom",
    "desc": "Delete records of a certain type, target specific records\nusing the  `where`  property of the options argument.",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "deleteOne",
    "desc": "Delete a specific record by providing the  `rid`",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "dropType",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "newEdge",
    "desc": "Insert a new edge into the database.",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "newTransaction",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "newVertex",
    "desc": "Insert a new vertex into the database.",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "selectFrom",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "selectOne",
    "desc": "Select a specific record by providing the  `rid`",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "transaction",
    "desc": "Helps to manage a transaction, by automatically invoking  `newTransation` ,\nand passing the returned  `SpriteTransaction`  to a callback as an argument,\nto be passed to non-idempotent databases operations.",
    "type": "method"
  },
  {
    "parent": "GraphModality",
    "name": "updateOne",
    "desc": "Update one record in the database, by providing an RID.",
    "type": "method"
  },
  {
    "name": "GraphModality",
    "desc": "A window to a specific graph set.\nMandatory type parameters for the graph elements to target.",
    "type": "class"
  },
  {
    "parent": "SpriteDatabase",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_client",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_documentModality",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_graphModality",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_name",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_sql",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteDatabase",
    "name": "name",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteDatabase",
    "name": "sql",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_endpoint",
    "desc": "Helper function for building enpoints",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "command",
    "desc": "Executes a command on the target database. This method only executes\nnon-idempotent statements (that can change the database), such as  `INSERT` ,\n `CREATE` , and  `DELETE` . The execution of idempotent commands will throw an\n `IllegalArgumentException`  exception. If you are trying to execute\nidempotent commands, see the  `SpriteDatabase.query()`  method.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "commitTransaction",
    "desc": "Commits a transaction on the server, provided a transaction id.\nProvide the id obtained from the transaction returned from invoking\n `SpriteDatabase.newTransaction()` .",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "documentModality",
    "desc": "Returns a modality for working with document records within the database.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "explain",
    "desc": "Returns information about query execution planning of a specific statement,\nwithout executing the statement itself.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "getSchema",
    "desc": "Return the current schema.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "graphModality",
    "desc": "Returns a modality for working with graph records within the database.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "newTransaction",
    "desc": "Begins a transaction on the server, managed as a session.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "query",
    "desc": "Executes a query against the target database. This method only executes\nidempotent statements (that cannot change the database), namely  `SELECT` \nand  `MATCH` . The execution of non-idempotent commands will throw an\n `IllegalArgumentException`  exception. If you are trying to execute\nnon-idempotent commands, see the  `SpriteDatabase.command()`  method.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "rollbackTransaction",
    "desc": "Rolls back a transaction on the server. Provide the session id obtained with the  `SpriteDatabase.newTransaction()`  method.",
    "type": "method"
  },
  {
    "name": "SpriteDatabase",
    "desc": "Interact with a database, perform queries, issue commands to manage\nrecords, types, and settings.",
    "type": "class"
  },
  {
    "parent": "SpriteServer",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "SpriteServer",
    "name": "_client",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteServer",
    "name": "_validate",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteServer",
    "name": "_booleanCommand",
    "desc": "Internal method for sending commands to the server in which a JSON response\ncontaining an  `ok`  value in the  `result`  property is expected.  `ok`  is then\nreturned as a simple boolean ( `true` ) value",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "closeDatabase",
    "desc": "Close a database",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "command",
    "desc": "A method for sending commands (as strings) to the server.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "connectCluster",
    "desc": "Connects this server to a cluster with  `address` .",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "createDatabase",
    "desc": "Create a database",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "createUser",
    "desc": "Create a user.  `username` ,  `password` , and access controls to multiple databases\ncan be established using the  `databases`  property of the input parameters.\nThe  `databases`  object uses 'groups' to grant access controls. Assigning\na user to groups within a specific database grants them the permissions associated\nwith those groups for a particular database.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "database",
    "desc": "Returns an SpriteDatabase client for the supplied  `databaseName` ,\nusing the authorization details of the  `SpriteServer`  client.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "databaseExists",
    "desc": "Check to see if a database exists.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "disconnectCluster",
    "desc": "Disconnects the server from the cluster.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "dropDatabase",
    "desc": "Drop a database",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "dropUser",
    "desc": "Drop a user from the ArcadeDB server.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "getEvents",
    "desc": "Retrieves a list of server events, optionally a filename of the form\n `server-event-log-yyyymmdd-HHMMSS.INDEX.jsonl`  (where INDEX is a integer, i.e. 0)\ncan be given to retrieve older event logs.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "getInformation",
    "desc": "Returns the current configuration.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "listDatabases",
    "desc": "Returns a list of database names that are present on the server.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "openDatabase",
    "desc": "Open a database",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "serverReady",
    "desc": "Returns a  `boolean`  value indicating if the ArcadeDB server is ready.\\\nUseful for remote monitoring of server readiness.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "shutdown",
    "desc": "Gracefully shutdown the server.\\\n `TODO:`  This works, in that it does shutdown the server, but the fetch throws\nbefore it resolves, guessing because the server is shutting down. A CURL, however,\nreturns an empty  `204`  response as the documentation indicates.",
    "type": "method"
  },
  {
    "name": "SpriteServer",
    "desc": "Methods for interact with an ArcadeDB server. Manage databases, users, etc.",
    "type": "class"
  },
  {
    "parent": "SpriteTransaction",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "SpriteTransaction",
    "name": "_committed",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "_id",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "database",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "committed",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteTransaction",
    "name": "id",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteTransaction",
    "name": "commit",
    "desc": "undefined",
    "type": "method"
  },
  {
    "parent": "SpriteTransaction",
    "name": "rollback",
    "desc": "undefined",
    "type": "method"
  },
  {
    "name": "SpriteTransaction",
    "desc": "undefined",
    "type": "class"
  },
  {
    "name": "ArcadeCommandResponse",
    "desc": "The object returned from the server following a successfully command",
    "type": "interface"
  },
  {
    "name": "ISpriteConnection",
    "desc": "Stores the details of the server connection for use in\nfetch requests with the ArcadeDB Server.",
    "type": "interface"
  },
  {
    "name": "ISpriteCreateArcadeUser",
    "desc": "undefined",
    "type": "interface"
  },
  {
    "name": "ISpriteCreateTypeOptions",
    "desc": "Options to create a new type with.",
    "type": "interface"
  },
  {
    "name": "ISpriteDatabaseClientParameters",
    "desc": "The parameters used to create a  `SpriteDatabase` \nintance when there is an existing instance of a\n `SpriteRestClient` , such as when intantiated\nfrom a method in the  `SpriteServer`  class",
    "type": "interface"
  },
  {
    "name": "ISpriteDatabaseConnectionParameters",
    "desc": "The parameters necessary to perform opertations\non a target ArcadeDB database.",
    "type": "interface"
  },
  {
    "name": "ISpriteDeleteFromOptions",
    "desc": "Options for a  `deleteFrom`  operation as executed \nvia a  `SpriteDatabase`  modality.",
    "type": "interface"
  },
  {
    "name": "ISpriteDropTypeOptions",
    "desc": "Options for a database.dropType() command",
    "type": "interface"
  },
  {
    "name": "ISpriteEdgeOptions",
    "desc": "Options associated with creating a new edge.",
    "type": "interface"
  },
  {
    "name": "ISpriteIndexdescriptor",
    "desc": "undefined",
    "type": "interface"
  },
  {
    "name": "ISpriteInsertRecordOptions",
    "desc": "Options to insert a new record with",
    "type": "interface"
  },
  {
    "name": "ISpriteRestClientConnectionParameters",
    "desc": "The parameters required to connect to the ArcadeDB server.",
    "type": "interface"
  },
  {
    "name": "ISpriteSelectFromOptions",
    "desc": "Options for a  `selectFrom`  operation, as executed via a  `SpriteDatabase`  modality.",
    "type": "interface"
  },
  {
    "name": "ArcadeBucketSelectionStrategies",
    "desc": "How the bucket will be selected for a newly created record of this type",
    "type": "type"
  },
  {
    "name": "ArcadeCreateEdgeResponse",
    "desc": "Result from the ArcadeDB server for a  `CREATE EDGE`  command",
    "type": "type"
  },
  {
    "name": "ArcadeCreateTypeResponse",
    "desc": "Result from the ArcadeDB server for a  `CREATE TYPE`  command",
    "type": "type"
  },
  {
    "name": "ArcadeDeleteFromResponse",
    "desc": "The response of a  `DELETE`  command.",
    "type": "type"
  },
  {
    "name": "ArcadeGetSchemaResponse",
    "desc": "The response from a  `SpriteDatabase.getSchema()`  query",
    "type": "type"
  },
  {
    "name": "ArcadeQueryResponse",
    "desc": "The object returned from the server following a successfully query",
    "type": "type"
  },
  {
    "name": "ArcadeRecordCategory",
    "desc": "The possible categories of a record in ArcadeDB,\nas they appear in the record's  `@cat`  property.",
    "type": "type"
  },
  {
    "name": "ArcadeRecordType",
    "desc": "The possible record types, as expected to be\nsupplied to a  `CREATE TYPE`  sql operation.",
    "type": "type"
  },
  {
    "name": "ArcadeServerBasicInformation",
    "desc": "The metadata returned from the server on every operation.",
    "type": "type"
  },
  {
    "name": "ArcadeServerClusterInformation",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeServerDefaultInformation",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeServerInfoMetrics",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeServerInfoSetting",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeServerInformation",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeServerInformationLevel",
    "desc": "The level of detail that should be returned for a\n `SpriteServer.getInformation()`  request",
    "type": "type"
  },
  {
    "name": "ArcadeSqlExplanation",
    "desc": "An object representing the explanation of an\nSQL command.",
    "type": "type"
  },
  {
    "name": "ArcadeSqlExplanationExecutionPlan",
    "desc": "SQL Explanation Execution Plan",
    "type": "type"
  },
  {
    "name": "ArcadeSupportedQueryLanguages",
    "desc": "The Query languages supported by ArcadeDB, supplied as a parameter\nto  `SpriteDatabase.query()`  and  `SpriteDatabase.command()`",
    "type": "type"
  },
  {
    "name": "ArcadeTypeDefinition",
    "desc": "A type definition returned by ArcadeDB when a getSchema command\nis compeleted.",
    "type": "type"
  },
  {
    "name": "ArcadeUpdateOneResponse",
    "desc": "Result from the ArcadeDB server for a  `UPDATE [@rid]`  command",
    "type": "type"
  },
  {
    "name": "AsArcadeEdges",
    "desc": "Adds ArcadeDB record metadata to the types\ndefined in the schema.",
    "type": "type"
  },
  {
    "name": "AsArcadeRecords",
    "desc": "Adds ArcadeDB record metadata to the types\ndefined in the schema. Used for Document\nand Vertex records.",
    "type": "type"
  },
  {
    "name": "DeleteFromCount",
    "desc": "The object returned in the response of a  `DELETE` \ncommand.",
    "type": "type"
  },
  {
    "name": "EdgeRecordMeta",
    "desc": "The metadata for an Edge record in \nArcadeDB",
    "type": "type"
  },
  {
    "name": "OmitMeta",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "RecordMeta",
    "desc": "The base metadata for record in \nArcadeDB.",
    "type": "type"
  },
  {
    "name": "RecordOperationResponse",
    "desc": "The object returned as a receipt of a successfully executed\noperation.",
    "type": "type"
  },
  {
    "name": "SpriteArcadeServerEvent",
    "desc": "Describes an event on the ArcadeDB server",
    "type": "type"
  },
  {
    "name": "SpriteArcadeServerEvents",
    "desc": "The ArcadeDB Server Events Log",
    "type": "type"
  },
  {
    "name": "SpriteEdgeVertexDescriptor",
    "desc": "Describes a  `to`  or  `from`  point of an edge, either as a string (the record's  `@rid` ),\nor, by providing an object which describes an index of a vertex to use a\n `to` / `from`  point (i.e.  `{type: 'user', key: 'name', value: 'Jeremiah'}` )",
    "type": "type"
  },
  {
    "name": "SpriteOperators",
    "desc": "Operators for a  `WHERE`  sql statement",
    "type": "type"
  },
  {
    "name": "SpriteTransactionCallback",
    "desc": "A callback which contains the operations to be conducted within a transaction",
    "type": "type"
  },
  {
    "name": "SpriteWhereClause",
    "desc": "An array with three items used to describe a  `where`  statement.",
    "type": "type"
  },
  {
    "name": "TypeNames",
    "desc": "The TypeNames in a supplied schema.",
    "type": "type"
  },
  {
    "name": "WithRid",
    "desc": "A base type, with an  `@rid`  property added.",
    "type": "type"
  },
  {
    "name": "COMPARISON_OPERATORS",
    "desc": "undefined",
    "type": "unknown"
  }
]