[
  {
    "parent": "SpriteDatabase",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "SpriteDatabase",
    "name": "_session",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteDatabase",
    "name": "command",
    "desc": "Executes a command on the target database. This method should only be used\nfor non-transactional, non-idempotent statements such as  `CREATE` ,  `ALTER` , or  `DROP` .\n\nCRUD operations must be part of a transaction; otherwise, changes will not persist.\nUse the  `SpriteTransaction.crud()`  method for this purpose.\n\nIf you need to execute idempotent commands, see  `SpriteDatabase.query()` .",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "create",
    "desc": "Create a new database on the server.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "exists",
    "desc": "Check to see if this database exists on the server\n(i.e. the database was created).",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "explain",
    "desc": "Returns information about query execution planning of a specific statement,\nwithout executing the statement itself.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "getSchema",
    "desc": "Return the current schema.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "newTransaction",
    "desc": "Creates and returns a new  SpriteTransaction .\nOperations requiring the transaction should be executed using\nthe  `crud()`  method on the returned object. The\ntransaction can be committed using the  `commit()`  method, and\nrolled-back by invoking  `rollback()` .",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "query",
    "desc": "Executes a query against the target database. This method only executes\nidempotent statements (that cannot change the database), namely  `SELECT` \nand  `MATCH` .\n\n**The execution of non-idempotent commands will throw an\n `IllegalArgumentException`  exception.**\n\nIf you are trying to execute\nnon-idempotent commands, see the  SpriteDatabase.command  method.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "setCredentials",
    "desc": "Set the credentials that the database client should use\nwhen interacting with the ArcadeDB server.",
    "type": "method"
  },
  {
    "parent": "SpriteDatabase",
    "name": "transaction",
    "desc": "Creates a new transaction and passes it as an argument to a callback which\nrepresents the transaction scope. The transaction is committed when the\ncallback resolves. The transaction can be rolled back by invoking\n `SpriteTransaction.rollback()`  within the callback.",
    "type": "method"
  },
  {
    "name": "SpriteDatabase",
    "desc": "Interacts with a database, performing queries and issuing commands to manage\nrecords, types, and settings.",
    "type": "class"
  },
  {
    "parent": "SpriteServer",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "SpriteServer",
    "name": "_session",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteServer",
    "name": "closeDatabase",
    "desc": "When you close a database in ArcadeDB, it:\n1. Frees up resources on the server: The database instance is released, and the associated resources, such as memory, threads, and file handles, are returned to the system. This helps to reduce the server's memory footprint and free up resources for other tasks.\n2. Releases it from RAM: The database instance is removed from the server's RAM, which means that the database's metadata, schema, and cached data are no longer stored in memory. This helps to reduce memory usage.\n3. Prevents further operations: Once the database is closed, users can no longer perform operations on the database, such as executing queries, creating new records, or modifying existing data. The database is effectively \"offline\" until it's reopened.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "command",
    "desc": "Sends a command to the ArcadeDB server and returns the response.\n\nThis method provides a way to execute arbitrary commands on the server, such as creating databases, executing queries, or performing administrative tasks.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "connectCluster",
    "desc": "Connects this server to a cluster with  `address` .",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "createDatabase",
    "desc": "Create a database",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "createUser",
    "desc": "Create a user.  `username` ,  `password` , and access controls to multiple databases\ncan be established using the  `databases`  property of the input parameters.\nThe  `databases`  object uses 'groups' to grant access controls. Assigning\na user to groups within a specific database grants them the permissions associated\nwith those groups for a particular database.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "database",
    "desc": "Returns a  `SpriteDatabase`  instance for the supplied  `databaseName` ,\nusing the authorization details of the  `SpriteServer`  instance.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "disconnectCluster",
    "desc": "Disconnects the server from the cluster.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "dropDatabase",
    "desc": "Drop a database",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "dropUser",
    "desc": "Drop a user from the ArcadeDB server.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "getEvents",
    "desc": "Retrieves a list of server events, optionally a filename of the form\n `server-event-log-yyyymmdd-HHMMSS.INDEX.jsonl`  (where INDEX is a integer, i.e. 0)\ncan be given to retrieve older event logs.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "getInformation",
    "desc": "Returns the current configuration.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "listDatabases",
    "desc": "Returns a list of database names that are present on the server.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "openDatabase",
    "desc": "When you \"open\" a database in ArcadeDB, it means you're creating an instance of the database in memory, allocating resources, and making the database available for operations. Here's what happens when you open a database:\n\n1. Create a new database instance: A new database instance is created in memory, which includes the database's metadata, schema, and cached data. This instance is used to manage the database's resources and provide access to the data.\n2. Allocate resources: The database instance allocates the necessary resources, such as memory, threads, and file handles, to support the database's operations. This ensures that the database has the necessary resources to handle incoming requests.\n3. Load database metadata and schema: The database's metadata and schema are loaded into memory, which includes information about the database's structure, indexes, and relationships.\n4. Connect to the underlying storage: The database instance establishes a connection to the underlying storage, such as disk storage, to access the database files.\n5. Make the database available for operations: The database is now available for users to perform operations, such as executing queries, creating new records, or modifying existing data.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "serverReady",
    "desc": "Returns a  `boolean`  value indicating if the ArcadeDB server is ready.\\\nUseful for remote monitoring of server readiness.",
    "type": "method"
  },
  {
    "parent": "SpriteServer",
    "name": "shutdown",
    "desc": "Gracefully shutdown the server.\\\n `TODO:`  This works, in that it does shutdown the server, but the fetch throws\nbefore it resolves, guessing because the server is shutting down. A CURL, however,\nreturns an empty  `204`  response as the documentation indicates.",
    "type": "method"
  },
  {
    "name": "SpriteServer",
    "desc": "Methods for interact with an ArcadeDB server. Manage databases, users, etc.",
    "type": "class"
  },
  {
    "parent": "SpriteTransaction",
    "name": "constructor",
    "desc": "undefined",
    "type": "function"
  },
  {
    "parent": "SpriteTransaction",
    "name": "_committed",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "_id",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "_rolledBack",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "_session",
    "desc": "undefined",
    "type": "property"
  },
  {
    "parent": "SpriteTransaction",
    "name": "committed",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteTransaction",
    "name": "id",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteTransaction",
    "name": "rolledBack",
    "desc": "undefined",
    "type": "enum"
  },
  {
    "parent": "SpriteTransaction",
    "name": "commit",
    "desc": "Commit the transaction.",
    "type": "method"
  },
  {
    "parent": "SpriteTransaction",
    "name": "crud",
    "desc": "Perform a CRUD operation in the transaction.",
    "type": "method"
  },
  {
    "parent": "SpriteTransaction",
    "name": "rollback",
    "desc": "Rollback the transaction.",
    "type": "method"
  },
  {
    "name": "SpriteTransaction",
    "desc": "A transaction in Sprite, contains the transaction id, and methods to\ncommit or rollback the transaction.",
    "type": "class"
  },
  {
    "name": "AlterBucket",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `ALTER BUCKET`  command",
    "type": "interface"
  },
  {
    "name": "AlterType",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `ALTER TYPE`  command",
    "type": "interface"
  },
  {
    "name": "CreateBucket",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `CREATE BUCKET`  command",
    "type": "interface"
  },
  {
    "name": "CreateDocumentType",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `CREATE document TYPE <Name>`  command",
    "type": "interface"
  },
  {
    "name": "CreateEdgeType",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `CREATE edge TYPE <Name>`  command",
    "type": "interface"
  },
  {
    "name": "CreateVertexType",
    "desc": "An array, which contain an object returned from\nArcadeDB for a  `CREATE vertex TYPE <Name>`  command",
    "type": "interface"
  },
  {
    "name": "DropBucket",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `DROP BUCKET`  command",
    "type": "interface"
  },
  {
    "name": "DropType",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `DROP document TYPE <Name>`  command",
    "type": "interface"
  },
  {
    "name": "EdgeRecordMeta",
    "desc": "The metadata for an Edge record in\nArcadeDB",
    "type": "interface"
  },
  {
    "name": "InsertDocument",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `INSERT INTO <document-type>` \ncommand",
    "type": "interface"
  },
  {
    "name": "InsertVertex",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `INSERT INTO <vertex-type>` \ncommand",
    "type": "interface"
  },
  {
    "name": "ArcadeBucketSelectionStrategies",
    "desc": "How the bucket will be selected for a newly created record of this type",
    "type": "type"
  },
  {
    "name": "ArcadeCreateEdgeResponse",
    "desc": "Result from the ArcadeDB server for a  `CREATE EDGE`  command",
    "type": "type"
  },
  {
    "name": "ArcadeCreateTypeResponse",
    "desc": "Result from the ArcadeDB server for a  `CREATE TYPE`  command",
    "type": "type"
  },
  {
    "name": "ArcadeDeleteFromResponse",
    "desc": "The response of a  `DELETE`  command.",
    "type": "type"
  },
  {
    "name": "ArcadeDocument",
    "desc": "The  `DOCUMENT`  record of a certain type, with ArcadeDB meta\nattached.",
    "type": "type"
  },
  {
    "name": "ArcadeDropTypeResponse",
    "desc": "Result from the ArcadeDB server for a  `DROP TYPE`  command",
    "type": "type"
  },
  {
    "name": "ArcadeEdge",
    "desc": "The  `EDGE`  record of a certain type, with ArcadeDB meta\nattached.",
    "type": "type"
  },
  {
    "name": "ArcadeGetSchemaResponse",
    "desc": "The response from a  `SpriteDatabase.getSchema()`  query",
    "type": "type"
  },
  {
    "name": "ArcadeRecordCategory",
    "desc": "The possible categories of a record in ArcadeDB,\nas they appear in the record's  `@cat`  property.",
    "type": "type"
  },
  {
    "name": "ArcadeRecordType",
    "desc": "The possible record types, as expected to be\nsupplied to a  `CREATE TYPE`  sql operation.",
    "type": "type"
  },
  {
    "name": "ArcadeSelectTimeoutStrategy",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeSqlExaplantionExecutionPlanStep",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "ArcadeSqlExplanation",
    "desc": "An object representing the explanation of an\nSQL command.",
    "type": "type"
  },
  {
    "name": "ArcadeSqlExplanationExecutionPlan",
    "desc": "SQL Explanation Execution Plan",
    "type": "type"
  },
  {
    "name": "ArcadeTypeDefinition",
    "desc": "A type definition returned by ArcadeDB when a getSchema command\nis compeleted.",
    "type": "type"
  },
  {
    "name": "ArcadeUpdateOneResponse",
    "desc": "Result from the ArcadeDB server for a  `UPDATE [@rid]`  command",
    "type": "type"
  },
  {
    "name": "ArcadeVertex",
    "desc": "The  `VERTEX`  record of a certain type, with ArcadeDB meta\nattached.",
    "type": "type"
  },
  {
    "name": "CreateEdge",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `CREATE EDGE <edge-type>`  command",
    "type": "type"
  },
  {
    "name": "CreateVertex",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `CREATE VERTEX <vertex-type>`  command",
    "type": "type"
  },
  {
    "name": "DeleteFrom",
    "desc": "An array, which contains an object returned from\nArcadeDB for a  `DELETE FROM`  command. The object\ncontains one property,  `count`  which is an\ninteger",
    "type": "type"
  },
  {
    "name": "DeleteFromCount",
    "desc": "The object returned in the response of a  `DELETE` \ncommand.",
    "type": "type"
  },
  {
    "name": "OmitMeta",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "RecordMeta",
    "desc": "The base metadata for record in\nArcadeDB.",
    "type": "type"
  },
  {
    "name": "RecordOperationResponse",
    "desc": "The object returned as a receipt of a successfully executed\noperation.",
    "type": "type"
  },
  {
    "name": "TypeNames",
    "desc": "The TypeNames in a supplied schema.",
    "type": "type"
  },
  {
    "name": "ValidSuperTypeKey",
    "desc": "undefined",
    "type": "type"
  },
  {
    "name": "WithRid",
    "desc": "A base type, with an  `@rid`  property added.",
    "type": "type"
  }
]